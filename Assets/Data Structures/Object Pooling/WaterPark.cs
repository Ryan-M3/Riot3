using System.Collections;using System.Collections.Generic;using UnityEngine;using Priority_Queue;/// <summary>/// A WaterPark is a collection of pools (get it?). It tells each pool when it/// can add objects so that they're not all running simultaneously, which is/// the point of a pool entirely./// </summary>public class WaterPark : MonoBehaviour {    public float updateFreq = 1;    public List<Pool> pools = new List<Pool>();    protected SimplePriorityQueue<Pool> poolQ = new SimplePriorityQueue<Pool>();    public void Start() {        foreach (Pool p in pools)            poolQ.Enqueue(p, -p.roomLeft);        StartCoroutine("PoolNext");    }    public void UpdateAvailablePoolSpace(Pool pool, float poolSpace) {        if (!poolQ.Contains(pool))            Debug.LogWarning("Pool, " + pool.gameObject.name + ", attempted to update it's priority queue rank without being in there to begin with.");        else            poolQ.UpdatePriority(pool, -poolSpace); // they should call it a rank, not a priorty, since 0 > 1    }    /// <summary> Ask the most unfilled pool to produce and pool a new poolable object. </summary>    protected IEnumerator PoolNext() {        while (true) {            Pool p = poolQ.Dequeue();            if (p.roomLeft > 0)                p.AddNewPoolable();            poolQ.Enqueue(p, -p.roomLeft);            yield return new WaitForSecondsRealtime(updateFreq);        }    }    /// <summary> If a Pool of the given type exists, return that Pool. </summary>    public Pool GetPool<T>() {        foreach (Pool pool in pools)            if (pool.prefab.GetComponent<T>() != null)                return pool;        return null;    }}