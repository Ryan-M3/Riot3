using System.Collections;using System.Collections.Generic;using UnityEngine;public class Pool : MonoBehaviour, IPool {    public GameObject prefab;    public int curPoolDemand;    public int roomLeft {        get {            return curPoolDemand - contents.Count;        }    }    public bool debugMode;    protected int n = 0;    protected List<Poolable> contents = new List<Poolable>();    /// <summary> Instantiate and pool a new poolable item. </summary>    public void AddNewPoolable() {        Poolable clone = Instantiate(prefab).GetComponent<Poolable>();        clone.motherpool = this;        clone.gameObject.name = clone.gameObject.name + " " + n;        n++;        if (clone == null)            Debug.LogWarning("Pool, " + gameObject.name + ", has a prefab with no Poolable script attached.");        if (debugMode)            Debug.Log(clone.gameObject.name + " made.");        Return(clone);    }    /// <summary> Remove and return a poolable object from the pool. </summary>    public Poolable Borrow() {        if (contents.Count == 0)            AddNewPoolable();        Poolable p = contents[0];        contents.Remove(p);        p.gameObject.SetActive(true);  // Reactivate() can't do this on it's own since inactive scripts can't be called.        p.Reactivate();        return p;    }    /// <summary> Return a poolable object previously borrowed from the pool. </summary>    public void Return(Poolable p) {        contents.Add(p);        p.gameObject.transform.position = gameObject.transform.position;        p.gameObject.transform.SetParent(gameObject.transform);        p.Deactivate();    }    /// <summary> Notify the pool that a new swimmer has arived. </summary>    public void AddSwimmer(Swimmer swim) {        // Maybe one day we'll need to do some more complex analysis with a Swimmer.        // Until then, all we really need is the estimatedPoolDemand.        curPoolDemand += swim.estimatedPoolDemand;    }    public void RemoveSwimmer(Swimmer swim) {        curPoolDemand -= swim.estimatedPoolDemand;    }}